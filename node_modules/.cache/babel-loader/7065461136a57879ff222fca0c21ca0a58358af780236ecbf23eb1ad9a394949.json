{"ast":null,"code":"var _jsxFileName = \"/Users/roni/Desktop/roni_projects/roni_test/my-app2/src/App.tsx\";\nimport React from 'react';\nimport './App.css';\n\n//////Votes calculation\n// interface Code {\n//   [key: string]: string | undefined\n// }\n\n// const Codes: Code = {\n//   \"C\" : \"Conservative Party\",\n//   \"L\" : \"Labour Party\",\n//   \"UKIP\" : \"UKIP\",\n//   \"LD\" : \"Liberal Democrats\",\n//   \"G\" : \"Green Party\",\n//   \"Ind\" : \"Independent\",\n//   \"SNP\" : \"SNP\"\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  ////Votes calculation\n  // let totalVotes:number = 0;\n  // const [htmlOutput, setHtmlOutput] = useState<any>([]);\n\n  // useEffect(() => {\n  //   ParseDataRow();\n  // }, []);\n\n  // const result = \"Cardiff West, 11014, C, 17803, L, 4923, UKIP, 2069, LD|Islington South & Finsbury, 22547, L, 9389, C, 4829, LD, 3375, UKIP, 3371, G, 309, Ind\";\n\n  // const calculateVotes = (vote: number) => {\n  //   return (vote / totalVotes) * 100;\n  // }\n\n  // const ParseDataRow = (): string => {\n  //   const html: Array<any> = [];\n  //   const rows = result.split('|');\n  //   rows.forEach((row)=> {\n  //     const datas = (row as string).split(', ');\n  //     datas.forEach((data) => {\n  //       console.log(typeof data);\n  //       const vote = parseInt(data);\n  //       if (vote) {\n  //         totalVotes += vote;\n  //         html.push(<div className='number'>{data}</div>);\n  //         html.push(<div className='number'>{calculateVotes(vote)}%</div>);\n  //       } else if ((Object).keys(Codes).includes(data)) {\n  //         html.push(<div className='code'>{Codes[data]}</div>);\n  //       } else {\n  //         html.push(<div className='title'>{data}</div>);\n  //       }\n  //     })\n  //   })\n\n  //   setHtmlOutput(html);\n\n  //   return '';\n  // }\n\n  //Split the treasure\n  let biggestNumber = 0;\n  let total = 0;\n  let peopleMoney = [];\n  const checkBiggestNumber = treasure => {\n    treasure.forEach(num => {\n      total += num;\n      if (num > biggestNumber) {\n        biggestNumber = num;\n      }\n    });\n  };\n  const SplitMoney = (treasure, peopleAmount) => {\n    const sortedTreasure = treasure.sort().reverse();\n    console.log(sortedTreasure);\n    checkBiggestNumber(treasure);\n    if (total < biggestNumber * peopleAmount) {\n      console.log(\"Nope\");\n    } else {\n      const personRequiredMoney = total / peopleAmount;\n    }\n    return '';\n  };\n  const CalculateRequiredMoney = (treasure, requiredMoney, biggestNumber) => {\n    // treasure.forEach((num) => {\n    //   if(num)\n    // })\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: SplitMoney([27, 7, 20], 2)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","App","biggestNumber","total","peopleMoney","checkBiggestNumber","treasure","forEach","num","SplitMoney","peopleAmount","sortedTreasure","sort","reverse","console","log","personRequiredMoney","CalculateRequiredMoney","requiredMoney","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/roni/Desktop/roni_projects/roni_test/my-app2/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\n//////Votes calculation\n// interface Code {\n//   [key: string]: string | undefined\n// }\n\n// const Codes: Code = {\n//   \"C\" : \"Conservative Party\",\n//   \"L\" : \"Labour Party\",\n//   \"UKIP\" : \"UKIP\",\n//   \"LD\" : \"Liberal Democrats\",\n//   \"G\" : \"Green Party\",\n//   \"Ind\" : \"Independent\",\n//   \"SNP\" : \"SNP\"\n// }\n\nfunction App() {\n\n  ////Votes calculation\n  // let totalVotes:number = 0;\n  // const [htmlOutput, setHtmlOutput] = useState<any>([]);\n\n  // useEffect(() => {\n  //   ParseDataRow();\n  // }, []);\n  \n  // const result = \"Cardiff West, 11014, C, 17803, L, 4923, UKIP, 2069, LD|Islington South & Finsbury, 22547, L, 9389, C, 4829, LD, 3375, UKIP, 3371, G, 309, Ind\";\n\n  // const calculateVotes = (vote: number) => {\n  //   return (vote / totalVotes) * 100;\n  // }\n\n  // const ParseDataRow = (): string => {\n  //   const html: Array<any> = [];\n  //   const rows = result.split('|');\n  //   rows.forEach((row)=> {\n  //     const datas = (row as string).split(', ');\n  //     datas.forEach((data) => {\n  //       console.log(typeof data);\n  //       const vote = parseInt(data);\n  //       if (vote) {\n  //         totalVotes += vote;\n  //         html.push(<div className='number'>{data}</div>);\n  //         html.push(<div className='number'>{calculateVotes(vote)}%</div>);\n  //       } else if ((Object).keys(Codes).includes(data)) {\n  //         html.push(<div className='code'>{Codes[data]}</div>);\n  //       } else {\n  //         html.push(<div className='title'>{data}</div>);\n  //       }\n  //     })\n  //   })\n\n  //   setHtmlOutput(html);\n\n  //   return '';\n  // }\n\n\n  //Split the treasure\n  let biggestNumber = 0;\n  let total = 0\n  let peopleMoney = [];\n\n\n\n  const checkBiggestNumber = (treasure: Array<number>) => {\n    treasure.forEach((num) => {\n      total += num;\n      if(num > biggestNumber) {\n        biggestNumber = num;\n      }\n    });\n  }\n\n\n  const SplitMoney = (treasure: Array<number>, peopleAmount: number) => {\n    const sortedTreasure = treasure.sort().reverse();\n    console.log(sortedTreasure);\n\n    checkBiggestNumber(treasure);\n    if(total < biggestNumber * peopleAmount) {\n      console.log(\"Nope\");\n    } else{\n      const personRequiredMoney = total / peopleAmount;\n\n\n    }\n    return ''\n  }\n\n  const CalculateRequiredMoney = (treasure: Array<number>, requiredMoney: number, biggestNumber: number) => {\n    // treasure.forEach((num) => {\n    //   if(num)\n    // })\n  }\n\n  return (\n    <div className=\"App\">\n      {/* {htmlOutput} */}\n      {SplitMoney([27,7,20], 2)}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAA+B,OAAO;AAClD,OAAO,WAAW;;AAElB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EAEb;EACA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;;EAGA;EACA,IAAIC,aAAa,GAAG,CAAC;EACrB,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,WAAW,GAAG,EAAE;EAIpB,MAAMC,kBAAkB,GAAIC,QAAuB,IAAK;IACtDA,QAAQ,CAACC,OAAO,CAAEC,GAAG,IAAK;MACxBL,KAAK,IAAIK,GAAG;MACZ,IAAGA,GAAG,GAAGN,aAAa,EAAE;QACtBA,aAAa,GAAGM,GAAG;MACrB;IACF,CAAC,CAAC;EACJ,CAAC;EAGD,MAAMC,UAAU,GAAGA,CAACH,QAAuB,EAAEI,YAAoB,KAAK;IACpE,MAAMC,cAAc,GAAGL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IAChDC,OAAO,CAACC,GAAG,CAACJ,cAAc,CAAC;IAE3BN,kBAAkB,CAACC,QAAQ,CAAC;IAC5B,IAAGH,KAAK,GAAGD,aAAa,GAAGQ,YAAY,EAAE;MACvCI,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACrB,CAAC,MAAK;MACJ,MAAMC,mBAAmB,GAAGb,KAAK,GAAGO,YAAY;IAGlD;IACA,OAAO,EAAE;EACX,CAAC;EAED,MAAMO,sBAAsB,GAAGA,CAACX,QAAuB,EAAEY,aAAqB,EAAEhB,aAAqB,KAAK;IACxG;IACA;IACA;EAAA,CACD;EAED,oBACEF,OAAA;IAAKmB,SAAS,EAAC,KAAK;IAAAC,QAAA,EAEjBX,UAAU,CAAC,CAAC,EAAE,EAAC,CAAC,EAAC,EAAE,CAAC,EAAE,CAAC;EAAC;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEV;AAACC,EAAA,GAtFQxB,GAAG;AAwFZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}