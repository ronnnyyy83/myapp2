{"ast":null,"code":"var _jsxFileName = \"/Users/roni/Desktop/roni_projects/roni_test/my-app2/src/App.tsx\";\nimport React from 'react';\nimport './App.css';\n\n//////Votes calculation\n// interface Code {\n//   [key: string]: string | undefined\n// }\n\n// const Codes: Code = {\n//   \"C\" : \"Conservative Party\",\n//   \"L\" : \"Labour Party\",\n//   \"UKIP\" : \"UKIP\",\n//   \"LD\" : \"Liberal Democrats\",\n//   \"G\" : \"Green Party\",\n//   \"Ind\" : \"Independent\",\n//   \"SNP\" : \"SNP\"\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  //////Votes calculation\n  // let totalVotes:number = 0;\n  // const [htmlOutput, setHtmlOutput] = useState<any>([]);\n\n  // useEffect(() => {\n  //   ParseDataRow();\n  // }, []);\n\n  // const result = \"Cardiff West, 11014, C, 17803, L, 4923, UKIP, 2069, LD|Islington South & Finsbury, 22547, L, 9389, C, 4829, LD, 3375, UKIP, 3371, G, 309, Ind\";\n\n  // const calculateVotes = (vote: number) => {\n  //   return (vote / totalVotes) * 100;\n  // }\n\n  // const ParseDataRow = (): string => {\n  //   const html: Array<any> = [];\n  //   const rows = result.split('|');\n  //   rows.forEach((row)=> {\n  //     const datas = (row as string).split(', ');\n  //     datas.forEach((data) => {\n  //       console.log(typeof data);\n  //       const vote = parseInt(data);\n  //       if (vote) {\n  //         totalVotes += vote;\n  //         html.push(<div className='number'>{data}</div>);\n  //         html.push(<div className='number'>{calculateVotes(vote)}%</div>);\n  //       } else if ((Object).keys(Codes).includes(data)) {\n  //         html.push(<div className='code'>{Codes[data]}</div>);\n  //       } else {\n  //         html.push(<div className='title'>{data}</div>);\n  //       }\n  //     })\n  //   })\n\n  //   setHtmlOutput(html);\n\n  //   return '';\n  // }\n\n  //Split the treasure\n  // let biggestNumber = 0;\n  // let total = 0\n  // let peopleMoney = [];\n\n  // const checkBiggestNumber = (treasure: Array<number>) => {\n  //   treasure.forEach((num) => {\n  //     total += num;\n  //     if(num > biggestNumber) {\n  //       biggestNumber = num;\n  //     }\n  //   });\n  // }\n\n  // const SplitMoney = (treasure: Array<number>, peopleAmount: number) => {\n  //   checkBiggestNumber(treasure);\n  //   if(total < biggestNumber * peopleAmount) {\n  //     console.log(\"Nope\");\n  //   } else{\n  //     const personRequiredMoney = total / peopleAmount;\n\n  //   }\n  // }\n\n  // const CalculateRequiredMoney = (treasure: Array<number>, requiredMoney: number, biggestNumber: number) => {\n  //   treasure.forEach((num) => {\n  //     if(num)\n  //   })\n  // }\n\n  function helper(arr, n, start, lsum, rsum) {\n    // If reached the end\n    if (start === n) return lsum === rsum;\n\n    // If divisible by 5 then add to the left sum\n    if (arr[start] % 5 === 0) lsum += arr[start];\n\n    // If divisible by 3 but not by 5\n    // then add to the right sum\n    else if (arr[start] % 3 === 0) rsum += arr[start];\n\n    // Else it can be added to any of the sub-arrays\n    else\n      // Try adding in both the sub-arrays (one by one)\n      // and check whether the condition satisfies\n      return helper(arr, n, start + 1, lsum + arr[start], rsum) || helper(arr, n, start + 1, lsum, rsum + arr[start]);\n\n    // For cases when element is multiple of 3 or 5.\n    return helper(arr, n, start + 1, lsum, rsum);\n  }\n\n  // Function to start the recursive calls\n  function splitArray(arr, n) {\n    // Initially start, lsum and rsum will all be 0\n    return helper(arr, n, 0, 0, 0);\n  }\n  function SplitMoney() {\n    // Driver code\n    let arr = [20, 27, 6, 1];\n    let n = arr.length;\n    if (splitArray(arr, n)) return \"Yes\";else return \"No\";\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: SplitMoney()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","App","helper","arr","n","start","lsum","rsum","splitArray","SplitMoney","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/roni/Desktop/roni_projects/roni_test/my-app2/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\n//////Votes calculation\n// interface Code {\n//   [key: string]: string | undefined\n// }\n\n// const Codes: Code = {\n//   \"C\" : \"Conservative Party\",\n//   \"L\" : \"Labour Party\",\n//   \"UKIP\" : \"UKIP\",\n//   \"LD\" : \"Liberal Democrats\",\n//   \"G\" : \"Green Party\",\n//   \"Ind\" : \"Independent\",\n//   \"SNP\" : \"SNP\"\n// }\n\nfunction App() {\n\n  //////Votes calculation\n  // let totalVotes:number = 0;\n  // const [htmlOutput, setHtmlOutput] = useState<any>([]);\n\n  // useEffect(() => {\n  //   ParseDataRow();\n  // }, []);\n  \n  // const result = \"Cardiff West, 11014, C, 17803, L, 4923, UKIP, 2069, LD|Islington South & Finsbury, 22547, L, 9389, C, 4829, LD, 3375, UKIP, 3371, G, 309, Ind\";\n\n  // const calculateVotes = (vote: number) => {\n  //   return (vote / totalVotes) * 100;\n  // }\n\n  // const ParseDataRow = (): string => {\n  //   const html: Array<any> = [];\n  //   const rows = result.split('|');\n  //   rows.forEach((row)=> {\n  //     const datas = (row as string).split(', ');\n  //     datas.forEach((data) => {\n  //       console.log(typeof data);\n  //       const vote = parseInt(data);\n  //       if (vote) {\n  //         totalVotes += vote;\n  //         html.push(<div className='number'>{data}</div>);\n  //         html.push(<div className='number'>{calculateVotes(vote)}%</div>);\n  //       } else if ((Object).keys(Codes).includes(data)) {\n  //         html.push(<div className='code'>{Codes[data]}</div>);\n  //       } else {\n  //         html.push(<div className='title'>{data}</div>);\n  //       }\n  //     })\n  //   })\n\n  //   setHtmlOutput(html);\n\n  //   return '';\n  // }\n\n\n  //Split the treasure\n  // let biggestNumber = 0;\n  // let total = 0\n  // let peopleMoney = [];\n\n  // const checkBiggestNumber = (treasure: Array<number>) => {\n  //   treasure.forEach((num) => {\n  //     total += num;\n  //     if(num > biggestNumber) {\n  //       biggestNumber = num;\n  //     }\n  //   });\n  // }\n\n\n  // const SplitMoney = (treasure: Array<number>, peopleAmount: number) => {\n  //   checkBiggestNumber(treasure);\n  //   if(total < biggestNumber * peopleAmount) {\n  //     console.log(\"Nope\");\n  //   } else{\n  //     const personRequiredMoney = total / peopleAmount;\n\n\n  //   }\n  // }\n\n  // const CalculateRequiredMoney = (treasure: Array<number>, requiredMoney: number, biggestNumber: number) => {\n  //   treasure.forEach((num) => {\n  //     if(num)\n  //   })\n  // }\n\n  function helper( arr:any, n:any, start:any, lsum:any, rsum:any):any\n{\n    // If reached the end\n    if (start === n)\n        return lsum === rsum;\n \n    // If divisible by 5 then add to the left sum\n    if (arr[start] % 5 === 0)\n        lsum += arr[start];\n \n    // If divisible by 3 but not by 5\n    // then add to the right sum\n    else if (arr[start] % 3 === 0)\n        rsum += arr[start];\n \n    // Else it can be added to any of the sub-arrays\n    else\n \n        // Try adding in both the sub-arrays (one by one)\n        // and check whether the condition satisfies\n        return helper(arr, n, start + 1, lsum + arr[start], rsum)\n           || helper(arr, n, start + 1, lsum, rsum + arr[start]);\n \n    // For cases when element is multiple of 3 or 5.\n    return helper(arr, n, start + 1, lsum, rsum);\n}\n \n// Function to start the recursive calls\nfunction splitArray(arr:any, n:any)\n{\n    // Initially start, lsum and rsum will all be 0\n    return helper(arr, n, 0, 0, 0);\n}\n \nfunction SplitMoney() {\n// Driver code\nlet arr = [20, 27, 6, 1 ];\nlet n =arr.length;\nif (splitArray(arr, n))\n    return \"Yes\";\nelse\n    return \"No\";\n}\n\n  return (\n    <div className=\"App\">\n      {/* {htmlOutput} */}\n      {SplitMoney()}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAA+B,OAAO;AAClD,OAAO,WAAW;;AAElB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EAEb;EACA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;;EAGA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA,SAASC,MAAMA,CAAEC,GAAO,EAAEC,CAAK,EAAEC,KAAS,EAAEC,IAAQ,EAAEC,IAAQ,EAChE;IACI;IACA,IAAIF,KAAK,KAAKD,CAAC,EACX,OAAOE,IAAI,KAAKC,IAAI;;IAExB;IACA,IAAIJ,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,EACpBC,IAAI,IAAIH,GAAG,CAACE,KAAK,CAAC;;IAEtB;IACA;IAAA,KACK,IAAIF,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,EACzBE,IAAI,IAAIJ,GAAG,CAACE,KAAK,CAAC;;IAEtB;IAAA;MAGI;MACA;MACA,OAAOH,MAAM,CAACC,GAAG,EAAEC,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAEC,IAAI,GAAGH,GAAG,CAACE,KAAK,CAAC,EAAEE,IAAI,CAAC,IACnDL,MAAM,CAACC,GAAG,EAAEC,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAEC,IAAI,EAAEC,IAAI,GAAGJ,GAAG,CAACE,KAAK,CAAC,CAAC;;IAE5D;IACA,OAAOH,MAAM,CAACC,GAAG,EAAEC,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAEC,IAAI,EAAEC,IAAI,CAAC;EAChD;;EAEA;EACA,SAASC,UAAUA,CAACL,GAAO,EAAEC,CAAK,EAClC;IACI;IACA,OAAOF,MAAM,CAACC,GAAG,EAAEC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAClC;EAEA,SAASK,UAAUA,CAAA,EAAG;IACtB;IACA,IAAIN,GAAG,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAE;IACzB,IAAIC,CAAC,GAAED,GAAG,CAACO,MAAM;IACjB,IAAIF,UAAU,CAACL,GAAG,EAAEC,CAAC,CAAC,EAClB,OAAO,KAAK,CAAC,KAEb,OAAO,IAAI;EACf;EAEE,oBACEJ,OAAA;IAAKW,SAAS,EAAC,KAAK;IAAAC,QAAA,EAEjBH,UAAU,CAAC;EAAC;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEV;AAACC,EAAA,GA5HQhB,GAAG;AA8HZ,eAAeA,GAAG;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}