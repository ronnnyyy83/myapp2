{"ast":null,"code":"var _jsxFileName = \"/Users/roni/Desktop/roni_projects/roni_test/my-app2/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\n\n//////Votes calculation\n// interface Code {\n//   [key: string]: string | undefined\n// }\n\n// const Codes: Code = {\n//   \"C\" : \"Conservative Party\",\n//   \"L\" : \"Labour Party\",\n//   \"UKIP\" : \"UKIP\",\n//   \"LD\" : \"Liberal Democrats\",\n//   \"G\" : \"Green Party\",\n//   \"Ind\" : \"Independent\",\n//   \"SNP\" : \"SNP\"\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  ////Votes calculation\n  let totalVotes = 0;\n  const [htmlOutput, setHtmlOutput] = useState([]);\n  useEffect(() => {\n    ParseDataRow();\n  }, []);\n  const result = \"Cardiff West, 11014, C, 17803, L, 4923, UKIP, 2069, LD|Islington South & Finsbury, 22547, L, 9389, C, 4829, LD, 3375, UKIP, 3371, G, 309, Ind\";\n  const calculateVotes = vote => {\n    return vote / totalVotes * 100;\n  };\n  const ParseDataRow = () => {\n    const html = [];\n    const rows = result.split('|');\n    rows.forEach(row => {\n      const datas = row.split(', ');\n      datas.forEach(data => {\n        console.log(typeof data);\n        const vote = parseInt(data);\n        if (vote) {\n          totalVotes += vote;\n          html.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"number\",\n            children: data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 21\n          }, this));\n          html.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"number\",\n            children: [calculateVotes(vote), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 21\n          }, this));\n        } else if (Object.keys(Codes).includes(data)) {\n          html.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"code\",\n            children: Codes[data]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 21\n          }, this));\n        } else {\n          html.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"title\",\n            children: data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 21\n          }, this));\n        }\n      });\n    });\n    setHtmlOutput(html);\n    return '';\n  };\n\n  //Split the treasure\n  let biggestNumber = 0;\n  let total = 0;\n  let peopleMoney = [];\n  const checkBiggestNumber = treasure => {\n    treasure.forEach(num => {\n      total += num;\n      if (num > biggestNumber) {\n        biggestNumber = num;\n      }\n    });\n  };\n  const SplitMoney = (treasure, peopleAmount) => {\n    const sortedTreasure = treasure.sort().reverse();\n    console.log(sortedTreasure);\n    checkBiggestNumber(treasure);\n    if (total < biggestNumber * peopleAmount) {\n      console.log(\"Nope\");\n    } else {\n      const personRequiredMoney = total / peopleAmount;\n    }\n    return '';\n  };\n  const CalculateRequiredMoney = (treasure, requiredMoney, biggestNumber) => {\n    // treasure.forEach((num) => {\n    //   if(num)\n    // })\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: SplitMoney([27, 7, 20], 2)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"sZFNdFJ1eyfGGoH6hcfqITjbu7I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","App","_s","totalVotes","htmlOutput","setHtmlOutput","ParseDataRow","result","calculateVotes","vote","html","rows","split","forEach","row","datas","data","console","log","parseInt","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","Codes","includes","biggestNumber","total","peopleMoney","checkBiggestNumber","treasure","num","SplitMoney","peopleAmount","sortedTreasure","sort","reverse","personRequiredMoney","CalculateRequiredMoney","requiredMoney","_c","$RefreshReg$"],"sources":["/Users/roni/Desktop/roni_projects/roni_test/my-app2/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\n//////Votes calculation\n// interface Code {\n//   [key: string]: string | undefined\n// }\n\n// const Codes: Code = {\n//   \"C\" : \"Conservative Party\",\n//   \"L\" : \"Labour Party\",\n//   \"UKIP\" : \"UKIP\",\n//   \"LD\" : \"Liberal Democrats\",\n//   \"G\" : \"Green Party\",\n//   \"Ind\" : \"Independent\",\n//   \"SNP\" : \"SNP\"\n// }\n\nfunction App() {\n\n  ////Votes calculation\n  let totalVotes:number = 0;\n  const [htmlOutput, setHtmlOutput] = useState<any>([]);\n\n  useEffect(() => {\n    ParseDataRow();\n  }, []);\n  \n  const result = \"Cardiff West, 11014, C, 17803, L, 4923, UKIP, 2069, LD|Islington South & Finsbury, 22547, L, 9389, C, 4829, LD, 3375, UKIP, 3371, G, 309, Ind\";\n\n  const calculateVotes = (vote: number) => {\n    return (vote / totalVotes) * 100;\n  }\n\n  const ParseDataRow = (): string => {\n    const html: Array<any> = [];\n    const rows = result.split('|');\n    rows.forEach((row)=> {\n      const datas = (row as string).split(', ');\n      datas.forEach((data) => {\n        console.log(typeof data);\n        const vote = parseInt(data);\n        if (vote) {\n          totalVotes += vote;\n          html.push(<div className='number'>{data}</div>);\n          html.push(<div className='number'>{calculateVotes(vote)}%</div>);\n        } else if ((Object).keys(Codes).includes(data)) {\n          html.push(<div className='code'>{Codes[data]}</div>);\n        } else {\n          html.push(<div className='title'>{data}</div>);\n        }\n      })\n    })\n\n    setHtmlOutput(html);\n\n    return '';\n  }\n\n\n  //Split the treasure\n  let biggestNumber = 0;\n  let total = 0\n  let peopleMoney = [];\n\n\n\n  const checkBiggestNumber = (treasure: Array<number>) => {\n    treasure.forEach((num) => {\n      total += num;\n      if(num > biggestNumber) {\n        biggestNumber = num;\n      }\n    });\n  }\n\n\n  const SplitMoney = (treasure: Array<number>, peopleAmount: number) => {\n    const sortedTreasure = treasure.sort().reverse();\n    console.log(sortedTreasure);\n\n    checkBiggestNumber(treasure);\n    if(total < biggestNumber * peopleAmount) {\n      console.log(\"Nope\");\n    } else{\n      const personRequiredMoney = total / peopleAmount;\n\n\n    }\n    return ''\n  }\n\n  const CalculateRequiredMoney = (treasure: Array<number>, requiredMoney: number, biggestNumber: number) => {\n    // treasure.forEach((num) => {\n    //   if(num)\n    // })\n  }\n\n  return (\n    <div className=\"App\">\n      {/* {htmlOutput} */}\n      {SplitMoney([27,7,20], 2)}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}