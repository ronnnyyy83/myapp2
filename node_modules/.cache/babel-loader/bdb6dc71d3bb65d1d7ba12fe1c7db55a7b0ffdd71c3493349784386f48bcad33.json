{"ast":null,"code":"var _jsxFileName = \"/Users/roni/Desktop/roni_projects/roni_test/my-app2/src/App.tsx\";\nimport React from 'react';\nimport './App.css';\n\n//////Votes calculation\n// interface Code {\n//   [key: string]: string | undefined\n// }\n\n// const Codes: Code = {\n//   \"C\" : \"Conservative Party\",\n//   \"L\" : \"Labour Party\",\n//   \"UKIP\" : \"UKIP\",\n//   \"LD\" : \"Liberal Democrats\",\n//   \"G\" : \"Green Party\",\n//   \"Ind\" : \"Independent\",\n//   \"SNP\" : \"SNP\"\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  //////Votes calculation\n  // let totalVotes:number = 0;\n  // const [htmlOutput, setHtmlOutput] = useState<any>([]);\n\n  // useEffect(() => {\n  //   ParseDataRow();\n  // }, []);\n\n  // const result = \"Cardiff West, 11014, C, 17803, L, 4923, UKIP, 2069, LD|Islington South & Finsbury, 22547, L, 9389, C, 4829, LD, 3375, UKIP, 3371, G, 309, Ind\";\n\n  // const calculateVotes = (vote: number) => {\n  //   return (vote / totalVotes) * 100;\n  // }\n\n  // const ParseDataRow = (): string => {\n  //   const html: Array<any> = [];\n  //   const rows = result.split('|');\n  //   rows.forEach((row)=> {\n  //     const datas = (row as string).split(', ');\n  //     datas.forEach((data) => {\n  //       console.log(typeof data);\n  //       const vote = parseInt(data);\n  //       if (vote) {\n  //         totalVotes += vote;\n  //         html.push(<div className='number'>{data}</div>);\n  //         html.push(<div className='number'>{calculateVotes(vote)}%</div>);\n  //       } else if ((Object).keys(Codes).includes(data)) {\n  //         html.push(<div className='code'>{Codes[data]}</div>);\n  //       } else {\n  //         html.push(<div className='title'>{data}</div>);\n  //       }\n  //     })\n  //   })\n\n  //   setHtmlOutput(html);\n\n  //   return '';\n  // }\n\n  //Split the treasure\n  // let biggestNumber = 0;\n  // let total = 0\n  // let peopleMoney = [];\n\n  // const checkBiggestNumber = (treasure: Array<number>) => {\n  //   treasure.forEach((num) => {\n  //     total += num;\n  //     if(num > biggestNumber) {\n  //       biggestNumber = num;\n  //     }\n  //   });\n  // }\n\n  // const SplitMoney = (treasure: Array<number>, peopleAmount: number) => {\n  //   checkBiggestNumber(treasure);\n  //   if(total < biggestNumber * peopleAmount) {\n  //     console.log(\"Nope\");\n  //   } else{\n  //     const personRequiredMoney = total / peopleAmount;\n\n  //   }\n  // }\n\n  // const CalculateRequiredMoney = (treasure: Array<number>, requiredMoney: number, biggestNumber: number) => {\n  //   treasure.forEach((num) => {\n  //     if(num)\n  //   })\n  // }\n  const people = 4;\n  function splitInThree(arr) {\n    let max = arr.reduce((a, b) => a + b, 0);\n    const oneThird = Math.ceil(max / people);\n    const assignment = Array(arr.length).fill(0);\n    const sums = [0, 0, 0];\n    function recur(i) {\n      let improved = false;\n      if (i < 0) {\n        // All values have been assigned\n        let currentMax = Math.max(...sums);\n        improved = currentMax < max;\n        max = Math.min(max, currentMax);\n      } else {\n        const value = arr[i];\n        let currentMax = max;\n        for (let bin = 0; bin < people; bin++) {\n          // If bin has already a third of the value, or adding the value to it would exceed \n          // the maximum size we already have a solution with, or if this bin has the same size\n          // as a previous bin, then skip this bin.\n          if (sums[bin] >= oneThird || sums[bin] + value > max || sums.indexOf(sums[bin]) < bin) continue;\n          sums[bin] += value;\n          if (recur(i - 1)) {\n            // Found a better solution\n            improved = true;\n            assignment[i] = bin;\n            if (max === oneThird) break; // We'll take this solution\n          }\n\n          sums[bin] -= value;\n        }\n      }\n      return improved;\n    }\n    recur(arr.length - 1);\n    // Distribute values according to collected assignments\n    return assignment.reduce((acc, bin, i) => {\n      acc[bin].push(arr[i]);\n      return acc;\n    }, [[], [], []]);\n  }\n  function SplitMoney() {\n    // Demo run\n    let arr = [3, 2, 7, 7, 14, 5, 3, 4, 9, 2];\n    let result = splitInThree(arr);\n    return result;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: SplitMoney()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","App","people","splitInThree","arr","max","reduce","a","b","oneThird","Math","ceil","assignment","Array","length","fill","sums","recur","i","improved","currentMax","min","value","bin","indexOf","acc","push","SplitMoney","result","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/roni/Desktop/roni_projects/roni_test/my-app2/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\n//////Votes calculation\n// interface Code {\n//   [key: string]: string | undefined\n// }\n\n// const Codes: Code = {\n//   \"C\" : \"Conservative Party\",\n//   \"L\" : \"Labour Party\",\n//   \"UKIP\" : \"UKIP\",\n//   \"LD\" : \"Liberal Democrats\",\n//   \"G\" : \"Green Party\",\n//   \"Ind\" : \"Independent\",\n//   \"SNP\" : \"SNP\"\n// }\n\nfunction App() {\n\n  //////Votes calculation\n  // let totalVotes:number = 0;\n  // const [htmlOutput, setHtmlOutput] = useState<any>([]);\n\n  // useEffect(() => {\n  //   ParseDataRow();\n  // }, []);\n  \n  // const result = \"Cardiff West, 11014, C, 17803, L, 4923, UKIP, 2069, LD|Islington South & Finsbury, 22547, L, 9389, C, 4829, LD, 3375, UKIP, 3371, G, 309, Ind\";\n\n  // const calculateVotes = (vote: number) => {\n  //   return (vote / totalVotes) * 100;\n  // }\n\n  // const ParseDataRow = (): string => {\n  //   const html: Array<any> = [];\n  //   const rows = result.split('|');\n  //   rows.forEach((row)=> {\n  //     const datas = (row as string).split(', ');\n  //     datas.forEach((data) => {\n  //       console.log(typeof data);\n  //       const vote = parseInt(data);\n  //       if (vote) {\n  //         totalVotes += vote;\n  //         html.push(<div className='number'>{data}</div>);\n  //         html.push(<div className='number'>{calculateVotes(vote)}%</div>);\n  //       } else if ((Object).keys(Codes).includes(data)) {\n  //         html.push(<div className='code'>{Codes[data]}</div>);\n  //       } else {\n  //         html.push(<div className='title'>{data}</div>);\n  //       }\n  //     })\n  //   })\n\n  //   setHtmlOutput(html);\n\n  //   return '';\n  // }\n\n\n  //Split the treasure\n  // let biggestNumber = 0;\n  // let total = 0\n  // let peopleMoney = [];\n\n  // const checkBiggestNumber = (treasure: Array<number>) => {\n  //   treasure.forEach((num) => {\n  //     total += num;\n  //     if(num > biggestNumber) {\n  //       biggestNumber = num;\n  //     }\n  //   });\n  // }\n\n\n  // const SplitMoney = (treasure: Array<number>, peopleAmount: number) => {\n  //   checkBiggestNumber(treasure);\n  //   if(total < biggestNumber * peopleAmount) {\n  //     console.log(\"Nope\");\n  //   } else{\n  //     const personRequiredMoney = total / peopleAmount;\n\n\n  //   }\n  // }\n\n  // const CalculateRequiredMoney = (treasure: Array<number>, requiredMoney: number, biggestNumber: number) => {\n  //   treasure.forEach((num) => {\n  //     if(num)\n  //   })\n  // }\n  const people = 4\n\n  function splitInThree(arr:any) {\n    let max = arr.reduce((a:any, b:any) => a + b, 0);\n    const oneThird = Math.ceil(max / people);\n    const assignment = Array(arr.length).fill(0);\n    const sums = [0, 0, 0];\n    \n    function recur(i:any) {\n        let improved = false;\n        if (i < 0) { // All values have been assigned\n            let currentMax = Math.max(...sums);\n            improved = currentMax < max;\n            max = Math.min(max, currentMax);\n        } else {\n            const value = arr[i];\n            let currentMax = max;\n            for (let bin = 0; bin < people; bin++) {\n                // If bin has already a third of the value, or adding the value to it would exceed \n                // the maximum size we already have a solution with, or if this bin has the same size\n                // as a previous bin, then skip this bin.\n                if (sums[bin] >= oneThird || sums[bin] + value > max || sums.indexOf(sums[bin]) < bin) continue;\n                sums[bin] += value;\n                if (recur(i - 1)) { // Found a better solution\n                    improved = true;\n                    assignment[i] = bin;\n                    if (max === oneThird) break; // We'll take this solution\n                }\n                sums[bin] -= value;\n            }\n        }\n        return improved;\n    }\n    recur(arr.length - 1);\n    // Distribute values according to collected assignments\n    return assignment.reduce((acc, bin, i) => {\n        acc[bin].push(arr[i]);\n        return acc;\n    }, [[], [], []]);\n}\nfunction SplitMoney() {\n// Demo run\nlet arr = [3,2,7,7,14,5,3,4,9,2];\nlet result = splitInThree(arr);\nreturn result;\n}\n\n  return (\n    <div className=\"App\">\n      {/* {htmlOutput} */}\n      {SplitMoney()}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAA+B,OAAO;AAClD,OAAO,WAAW;;AAElB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EAEb;EACA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;;EAGA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA,MAAMC,MAAM,GAAG,CAAC;EAEhB,SAASC,YAAYA,CAACC,GAAO,EAAE;IAC7B,IAAIC,GAAG,GAAGD,GAAG,CAACE,MAAM,CAAC,CAACC,CAAK,EAAEC,CAAK,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC;IAChD,MAAMC,QAAQ,GAAGC,IAAI,CAACC,IAAI,CAACN,GAAG,GAAGH,MAAM,CAAC;IACxC,MAAMU,UAAU,GAAGC,KAAK,CAACT,GAAG,CAACU,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;IAC5C,MAAMC,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAEtB,SAASC,KAAKA,CAACC,CAAK,EAAE;MAClB,IAAIC,QAAQ,GAAG,KAAK;MACpB,IAAID,CAAC,GAAG,CAAC,EAAE;QAAE;QACT,IAAIE,UAAU,GAAGV,IAAI,CAACL,GAAG,CAAC,GAAGW,IAAI,CAAC;QAClCG,QAAQ,GAAGC,UAAU,GAAGf,GAAG;QAC3BA,GAAG,GAAGK,IAAI,CAACW,GAAG,CAAChB,GAAG,EAAEe,UAAU,CAAC;MACnC,CAAC,MAAM;QACH,MAAME,KAAK,GAAGlB,GAAG,CAACc,CAAC,CAAC;QACpB,IAAIE,UAAU,GAAGf,GAAG;QACpB,KAAK,IAAIkB,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGrB,MAAM,EAAEqB,GAAG,EAAE,EAAE;UACnC;UACA;UACA;UACA,IAAIP,IAAI,CAACO,GAAG,CAAC,IAAId,QAAQ,IAAIO,IAAI,CAACO,GAAG,CAAC,GAAGD,KAAK,GAAGjB,GAAG,IAAIW,IAAI,CAACQ,OAAO,CAACR,IAAI,CAACO,GAAG,CAAC,CAAC,GAAGA,GAAG,EAAE;UACvFP,IAAI,CAACO,GAAG,CAAC,IAAID,KAAK;UAClB,IAAIL,KAAK,CAACC,CAAC,GAAG,CAAC,CAAC,EAAE;YAAE;YAChBC,QAAQ,GAAG,IAAI;YACfP,UAAU,CAACM,CAAC,CAAC,GAAGK,GAAG;YACnB,IAAIlB,GAAG,KAAKI,QAAQ,EAAE,MAAM,CAAC;UACjC;;UACAO,IAAI,CAACO,GAAG,CAAC,IAAID,KAAK;QACtB;MACJ;MACA,OAAOH,QAAQ;IACnB;IACAF,KAAK,CAACb,GAAG,CAACU,MAAM,GAAG,CAAC,CAAC;IACrB;IACA,OAAOF,UAAU,CAACN,MAAM,CAAC,CAACmB,GAAG,EAAEF,GAAG,EAAEL,CAAC,KAAK;MACtCO,GAAG,CAACF,GAAG,CAAC,CAACG,IAAI,CAACtB,GAAG,CAACc,CAAC,CAAC,CAAC;MACrB,OAAOO,GAAG;IACd,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;EACpB;EACA,SAASE,UAAUA,CAAA,EAAG;IACtB;IACA,IAAIvB,GAAG,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IAChC,IAAIwB,MAAM,GAAGzB,YAAY,CAACC,GAAG,CAAC;IAC9B,OAAOwB,MAAM;EACb;EAEE,oBACE5B,OAAA;IAAK6B,SAAS,EAAC,KAAK;IAAAC,QAAA,EAEjBH,UAAU,CAAC;EAAC;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEV;AAACC,EAAA,GA9HQlC,GAAG;AAgIZ,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}